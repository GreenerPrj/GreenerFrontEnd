{"ast":null,"code":"var _jsxFileName = \"/Users/bag-yeongmi/react-workspace/todo-react-app/src/pages/Plan.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// import Form from \"react-bootstrap/Form\";\n// import { ko } from \"date-fns/esm/locale\";\n// import { getMonth, getDate } from \"date-fns\";\n// import \"./Plan.css\";\n// // import \"./day.css\"\n// import MyplantsTab from './MyPlantsTab';\n// import Calendar from 'react-calendar';\n// import 'react-calendar/dist/Calendar.css';\n// function Plan() {\n//     // const [startDate, setStartDate] = useState(new Date());\n//     const [date, setDate] = useState(new Date());\n//     return (\n//         <>\n//         {/* <MyplantsTab /> */}\n//         {/* <DatePicker \n//           selected={startDate} \n//           onChange={(date) => setStartDate(date)}\n//           locale={ko}                   // 한글로 변경\n//           dateFormat=\"yyyy.MM.dd (eee)\" // 시간 포맷 변경\n//           showPopperArrow={false}       // 화살표 변경\n//           //minDate={new Date()}          // 오늘 날짜 전은 선택 못하게\n//           customInput={\t\t      // 날짜 뜨는 인풋 커스텀\n//             <Form.Control as=\"textarea\" rows={1} style={{width:\"250px\"}}/> }\n//           dayClassName={(d) =>\n//               getDate(d) === getDate(startDate) && getMonth(d) === getMonth(startDate)\n//                   ? 'normal-day selected-day'\n//                   : 'normal-day'\n//           }\n//         /> */}\n//           <div className='calendar-container'>\n//             <Calendar onChange={setDate} value={date} />\n//           </div>\n//           <p className='text-center'>\n//             <span className='bold'>Selected Date:</span>{' '}\n//             {date.toDateString()}\n//           </p>\n//         </>\n//     )\n// }\n// export default Plan;\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport Stack from '@mui/material/Stack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Plan() {\n  _s();\n\n  const [value, setValue] = React.useState(new Date());\n  return /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n    dateAdapter: AdapterDateFns,\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n        views: ['year'],\n        label: \"Year only\",\n        value: value,\n        onChange: newValue => {\n          setValue(newValue);\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          helperText: null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        views: ['year', 'month'],\n        label: \"Year and Month\",\n        minDate: new Date('2012-03-01'),\n        maxDate: new Date('2023-06-01'),\n        value: value,\n        onChange: newValue => {\n          setValue(newValue);\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          helperText: null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        openTo: \"year\",\n        views: ['year', 'month', 'day'],\n        label: \"Year, month and date\",\n        value: value,\n        onChange: newValue => {\n          setValue(newValue);\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          helperText: null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        views: ['day', 'month', 'year'],\n        label: \"Invert the order of views\",\n        value: value,\n        onChange: newValue => {\n          setValue(newValue);\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          helperText: null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        views: ['day'],\n        label: \"Just date\",\n        value: value,\n        onChange: newValue => {\n          setValue(newValue);\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          helperText: null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Plan, \"ojhCmkQ3k+kVHyMOfBmyTFu2wy0=\");\n\n_c = Plan;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plan\");","map":{"version":3,"names":["React","TextField","AdapterDateFns","LocalizationProvider","DatePicker","Stack","Plan","value","setValue","useState","Date","newValue","params"],"sources":["/Users/bag-yeongmi/react-workspace/todo-react-app/src/pages/Plan.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// import Form from \"react-bootstrap/Form\";\n// import { ko } from \"date-fns/esm/locale\";\n// import { getMonth, getDate } from \"date-fns\";\n// import \"./Plan.css\";\n// // import \"./day.css\"\n// import MyplantsTab from './MyPlantsTab';\n// import Calendar from 'react-calendar';\n// import 'react-calendar/dist/Calendar.css';\n\n// function Plan() {\n//     // const [startDate, setStartDate] = useState(new Date());\n\n//     const [date, setDate] = useState(new Date());\n\n//     return (\n//         <>\n//         {/* <MyplantsTab /> */}\n\n        \n//         {/* <DatePicker \n//           selected={startDate} \n//           onChange={(date) => setStartDate(date)}\n//           locale={ko}                   // 한글로 변경\n//           dateFormat=\"yyyy.MM.dd (eee)\" // 시간 포맷 변경\n//           showPopperArrow={false}       // 화살표 변경\n//           //minDate={new Date()}          // 오늘 날짜 전은 선택 못하게\n//           customInput={\t\t      // 날짜 뜨는 인풋 커스텀\n//             <Form.Control as=\"textarea\" rows={1} style={{width:\"250px\"}}/> }\n//           dayClassName={(d) =>\n//               getDate(d) === getDate(startDate) && getMonth(d) === getMonth(startDate)\n//                   ? 'normal-day selected-day'\n//                   : 'normal-day'\n//           }\n//         /> */}\n          \n//           <div className='calendar-container'>\n//             <Calendar onChange={setDate} value={date} />\n//           </div>\n//           <p className='text-center'>\n//             <span className='bold'>Selected Date:</span>{' '}\n//             {date.toDateString()}\n//           </p>\n      \n      \n\n//         </>\n//     )\n// }\n\n// export default Plan;\n\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport Stack from '@mui/material/Stack';\n\nexport default function Plan() {\n  const [value, setValue] = React.useState(new Date());\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <Stack spacing={3}>\n        <DatePicker\n          views={['year']}\n          label=\"Year only\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} helperText={null} />}\n        />\n        <DatePicker\n          views={['year', 'month']}\n          label=\"Year and Month\"\n          minDate={new Date('2012-03-01')}\n          maxDate={new Date('2023-06-01')}\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} helperText={null} />}\n        />\n        <DatePicker\n          openTo=\"year\"\n          views={['year', 'month', 'day']}\n          label=\"Year, month and date\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} helperText={null} />}\n        />\n        <DatePicker\n          views={['day', 'month', 'year']}\n          label=\"Invert the order of views\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} helperText={null} />}\n        />\n        <DatePicker\n          views={['day']}\n          label=\"Just date\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          renderInput={(params) => <TextField {...params} helperText={null} />}\n        />\n      </Stack>\n    </LocalizationProvider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}