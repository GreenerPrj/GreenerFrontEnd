{"ast":null,"code":"import { API_BASE_URL } from \"../app-config\";\nexport function call(api, method, request) {\n  let options = {\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      // response.ok가 true이면 정상적인 리스폰스를 받은것, 아니면 에러 리스폰스를 받은것.\n      return Promise.reject(json);\n    }\n\n    return json;\n  })).catch(error => {\n    // 추가된 부분\n    console.log(error.status);\n\n    if (error.status === 403) {\n      window.location.href = \"/login\"; // redirect\n    }\n\n    return Promise.reject(error);\n  });\n}\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then(response => {\n    if (response.token) {\n      // token이 존재하는 경우 Todo 화면으로 리디렉트\n      window.location.href = \"/\";\n    }\n  });\n}","map":{"version":3,"names":["API_BASE_URL","call","api","method","request","options","headers","Headers","url","body","JSON","stringify","fetch","then","response","json","ok","Promise","reject","catch","error","console","log","status","window","location","href","signin","userDTO","token"],"sources":["/Users/bag-yeongmi/react-workspace/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import { API_BASE_URL } from \"../app-config\";\n\nexport function call(api, method, request) {\n  let options = {\n    headers: new Headers({\n      \"Content-Type\": \"application/json\",\n    }),\n    url: API_BASE_URL + api,\n    method: method,\n  };\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n  }\n  return fetch(options.url, options)\n    .then((response) =>\n      response.json().then((json) => {\n        if (!response.ok) {\n          // response.ok가 true이면 정상적인 리스폰스를 받은것, 아니면 에러 리스폰스를 받은것.\n          return Promise.reject(json);\n        }\n        return json;\n      })\n    )\n    .catch((error) => {\n      // 추가된 부분\n      console.log(error.status);\n      if (error.status === 403) {\n        window.location.href = \"/login\"; // redirect\n      }\n      return Promise.reject(error);\n    });\n}\n\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then((response) => {\n    if (response.token) {\n      // token이 존재하는 경우 Todo 화면으로 리디렉트\n      window.location.href = \"/\";\n    }\n  });\n}"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AAEA,OAAO,SAASC,IAAT,CAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;EACzC,IAAIC,OAAO,GAAG;IACZC,OAAO,EAAE,IAAIC,OAAJ,CAAY;MACnB,gBAAgB;IADG,CAAZ,CADG;IAIZC,GAAG,EAAER,YAAY,GAAGE,GAJR;IAKZC,MAAM,EAAEA;EALI,CAAd;;EAOA,IAAIC,OAAJ,EAAa;IACX;IACAC,OAAO,CAACI,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeP,OAAf,CAAf;EACD;;EACD,OAAOQ,KAAK,CAACP,OAAO,CAACG,GAAT,EAAcH,OAAd,CAAL,CACJQ,IADI,CACEC,QAAD,IACJA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBE,IAAD,IAAU;IAC7B,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;MAChB;MACA,OAAOC,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP;IACD;;IACD,OAAOA,IAAP;EACD,CAND,CAFG,EAUJI,KAVI,CAUGC,KAAD,IAAW;IAChB;IACAC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAlB;;IACA,IAAIH,KAAK,CAACG,MAAN,KAAiB,GAArB,EAA0B;MACxBC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB,CADwB,CACS;IAClC;;IACD,OAAOT,OAAO,CAACC,MAAR,CAAeE,KAAf,CAAP;EACD,CAjBI,CAAP;AAkBD;AAED,OAAO,SAASO,MAAT,CAAgBC,OAAhB,EAAyB;EAC9B,OAAO3B,IAAI,CAAC,cAAD,EAAiB,MAAjB,EAAyB2B,OAAzB,CAAJ,CAAsCf,IAAtC,CAA4CC,QAAD,IAAc;IAC9D,IAAIA,QAAQ,CAACe,KAAb,EAAoB;MAClB;MACAL,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;IACD;EACF,CALM,CAAP;AAMD"},"metadata":{},"sourceType":"module"}