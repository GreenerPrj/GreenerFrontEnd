{"ast":null,"code":"var _jsxFileName = \"/Users/bag-yeongmi/react-workspace/todo-react-app/src/Components/pages/Scheduler.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MyplantsTab from './MyPlantsTab';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport './css/Scheduler.css';\nimport axios from 'axios'; // function Scheduler() {\n//     return (\n//         <>\n//         <MyplantsTab />\n//         <div className='list'>\n//         <Card style={{ width: '18rem' }}>\n//         <Card.Img variant=\"top\" src=\"/img/1.jpg\" />\n//         <Card.Body>\n//             <Card.Title>선인장</Card.Title><br />\n//             <Card.Text>등록일: 7월 24일</Card.Text>\n//             <Card.Text>\n//             이번 친구는 죽이지말고 열심히 키워보자!\n//             </Card.Text>\n//             <Button variant=\"primary\">상세보기</Button>\n//         </Card.Body>\n//         </Card>\n//         <Card style={{ width: '18rem' }}>\n//         <Card.Img variant=\"top\" src=\"/img/4.jpg\" />\n//         <Card.Body>\n//             <Card.Title>장미허브</Card.Title><br />\n//             <Card.Text>등록일: 7월 26일</Card.Text>\n//             <Card.Text>\n//             허브라서 먹을 수 있는 친구인줄 알았는데 식용이 아니었다..\n//             </Card.Text>\n//             <Button variant=\"primary\">상세보기</Button>\n//         </Card.Body>\n//         </Card>\n//         </div>\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Scheduler() {\n  _s();\n\n  const [list, setList] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchList = async () => {\n      try {\n        // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n        setError(null);\n        setList(null);\n        console.log(setError);\n        console.log(setList); // loading 상태를 true 로 바꿉니다.\n\n        setLoading(true);\n        const headers = {\n          \"Content-Type\": \"application/json\",\n          'Accept': '*/*'\n        };\n        const response = await axios.post('http://localhost:8080/api/v1/my-plants', axios.defaults.headers.common['accessToken'] = `Bearer ${localStorage.getItem(\"access\")}`, {\n          headers\n        }).then(res => {\n          // headers: {…} 로 들어감.\n          console.log('send ok', res.data);\n        });\n        console.log(response);\n        setList(response.data); // 데이터는 response.data 안에 들어있습니다.\n      } catch (e) {\n        setError(e);\n      }\n\n      setLoading(false);\n    };\n\n    fetchList();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 31\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 29\n  }, this);\n  if (!list) return null;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: list.map(list => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [list.id, \" \", list.name, \" \", list.bornDate, \" \", list.imagePath]\n    }, list.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Scheduler, \"s7jG/oEOFLr1zHpISVwdGH4+BO8=\");\n\n_c = Scheduler;\nexport default Scheduler;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scheduler\");","map":{"version":3,"names":["React","useState","useEffect","MyplantsTab","Button","Card","axios","Scheduler","list","setList","loading","setLoading","error","setError","fetchList","console","log","headers","response","post","defaults","common","localStorage","getItem","then","res","data","e","map","id","name","bornDate","imagePath"],"sources":["/Users/bag-yeongmi/react-workspace/todo-react-app/src/Components/pages/Scheduler.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MyplantsTab from './MyPlantsTab';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport './css/Scheduler.css';\nimport axios from 'axios';\n\n// function Scheduler() {\n//     return (\n//         <>\n//         <MyplantsTab />\n\n//         <div className='list'>\n//         <Card style={{ width: '18rem' }}>\n//         <Card.Img variant=\"top\" src=\"/img/1.jpg\" />\n//         <Card.Body>\n//             <Card.Title>선인장</Card.Title><br />\n//             <Card.Text>등록일: 7월 24일</Card.Text>\n//             <Card.Text>\n//             이번 친구는 죽이지말고 열심히 키워보자!\n//             </Card.Text>\n//             <Button variant=\"primary\">상세보기</Button>\n//         </Card.Body>\n//         </Card>\n\n//         <Card style={{ width: '18rem' }}>\n//         <Card.Img variant=\"top\" src=\"/img/4.jpg\" />\n//         <Card.Body>\n//             <Card.Title>장미허브</Card.Title><br />\n//             <Card.Text>등록일: 7월 26일</Card.Text>\n//             <Card.Text>\n//             허브라서 먹을 수 있는 친구인줄 알았는데 식용이 아니었다..\n//             </Card.Text>\n//             <Button variant=\"primary\">상세보기</Button>\n//         </Card.Body>\n//         </Card>\n//         </div>\n\n\n        function Scheduler() {\n          const [list, setList] = useState(null);\n          const [loading, setLoading] = useState(false);\n          const [error, setError] = useState(null);\n          \n\n          useEffect(() => {\n            const fetchList = async () => {\n              try {\n                // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n                setError(null);\n                setList(null);\n                console.log(setError);\n                console.log(setList);\n                // loading 상태를 true 로 바꿉니다.\n                setLoading(true);\n                \n                  const headers = {\n                    \"Content-Type\": \"application/json\",\n                    'Accept': '*/*'\n                  }\n\n                const response = await axios.post(\n                  'http://localhost:8080/api/v1/my-plants',\n                  axios.defaults.headers.common['accessToken'] = `Bearer ${localStorage.getItem(\"access\")}`,\n                  {headers}\n                  \n                ).then(res => { // headers: {…} 로 들어감.\n                    console.log('send ok', res.data)\n                  });\n                console.log(response);\n                setList(response.data); // 데이터는 response.data 안에 들어있습니다.\n              } catch (e) {\n                setError(e);\n              }\n              setLoading(false);\n            };\n        \n            fetchList();\n          }, []);\n        \n          if (loading) return <div>로딩중..</div>;\n          if (error) return <div>에러가 발생했습니다</div>;\n          if (!list) return null;\n          return (\n            <ul>\n              {list.map(list => (\n                <li key={list.id}>\n                  {list.id} {list.name} {list.bornDate} {list.imagePath}\n                </li>\n              ))}\n            </ul>\n          );\n        }\n        \n        export default Scheduler;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAO,qBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAGQ,SAASC,SAAT,GAAqB;EAAA;;EACnB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;EAGAC,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF;QACAD,QAAQ,CAAC,IAAD,CAAR;QACAJ,OAAO,CAAC,IAAD,CAAP;QACAM,OAAO,CAACC,GAAR,CAAYH,QAAZ;QACAE,OAAO,CAACC,GAAR,CAAYP,OAAZ,EALE,CAMF;;QACAE,UAAU,CAAC,IAAD,CAAV;QAEE,MAAMM,OAAO,GAAG;UACd,gBAAgB,kBADF;UAEd,UAAU;QAFI,CAAhB;QAKF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAN,CACrB,wCADqB,EAErBb,KAAK,CAACc,QAAN,CAAeH,OAAf,CAAuBI,MAAvB,CAA8B,aAA9B,IAAgD,UAASC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAA+B,EAFnE,EAGrB;UAACN;QAAD,CAHqB,EAKrBO,IALqB,CAKhBC,GAAG,IAAI;UAAE;UACZV,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBS,GAAG,CAACC,IAA3B;QACD,CAPoB,CAAvB;QAQAX,OAAO,CAACC,GAAR,CAAYE,QAAZ;QACAT,OAAO,CAACS,QAAQ,CAACQ,IAAV,CAAP,CAvBE,CAuBsB;MACzB,CAxBD,CAwBE,OAAOC,CAAP,EAAU;QACVd,QAAQ,CAACc,CAAD,CAAR;MACD;;MACDhB,UAAU,CAAC,KAAD,CAAV;IACD,CA7BD;;IA+BAG,SAAS;EACV,CAjCQ,EAiCN,EAjCM,CAAT;EAmCA,IAAIJ,OAAJ,EAAa,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EACb,IAAIE,KAAJ,EAAW,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EACX,IAAI,CAACJ,IAAL,EAAW,OAAO,IAAP;EACX,oBACE;IAAA,UACGA,IAAI,CAACoB,GAAL,CAASpB,IAAI,iBACZ;MAAA,WACGA,IAAI,CAACqB,EADR,OACarB,IAAI,CAACsB,IADlB,OACyBtB,IAAI,CAACuB,QAD9B,OACyCvB,IAAI,CAACwB,SAD9C;IAAA,GAASxB,IAAI,CAACqB,EAAd;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GArDQtB,S;;KAAAA,S;AAuDT,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}