{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN');\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    form,\n    key,\n    value\n  } = _ref;\n  return {\n    form,\n    //register, login\n    key,\n    //username, password, email\n    value //실제 바꾸려는 값\n\n  };\n});\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); //register / login\n\nexport const register = createAction(REGISTER, _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return {\n    username,\n    password\n  };\n});\nexport const login = createAction(LOGIN, _ref3 => {\n  let {\n    username,\n    password\n  } = _ref3;\n  return {\n    username,\n    password\n  };\n}); //사가 생성\n\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\nexport const initialState = {\n  register: {\n    email: '',\n    password: '',\n    username: ''\n  },\n  login: {\n    email: '',\n    password: ''\n  },\n  auth: null,\n  authError: null\n};\nconst auth = handleActions({\n  [CHANGE_FIELD]: (state, _ref4) => {\n    let {\n      payload: {\n        form,\n        key,\n        value\n      }\n    } = _ref4;\n    return produce(state, draft => {\n      draft[form][key] = value;\n    });\n  },\n  [INITIALIZE_FORM]: (state, _ref5) => {\n    let {\n      payload: form\n    } = _ref5;\n    return { ...state,\n      [form]: initialState[form],\n      authError: null //폼 전환 시 회원 인증 에러 초기화\n\n    };\n  },\n  //회원가입 성공\n  [REGISTER_SUCCESS]: (state, _ref6) => {\n    let {\n      payload: auth\n    } = _ref6;\n    return { ...state,\n      authError: null,\n      auth\n    };\n  },\n  //회원가입 실패\n  [REGISTER_FAILURE]: (state, _ref7) => {\n    let {\n      payload: error\n    } = _ref7;\n    return { ...state,\n      authError: error\n    };\n  },\n  //로그인 성공\n  [LOGIN_SUCCESS]: (state, _ref8) => {\n    let {\n      payload: auth\n    } = _ref8;\n    return { ...state,\n      authError: null,\n      auth\n    };\n  },\n  //로그인 실패\n  [LOGIN_FAILURE]: (state, _ref9) => {\n    let {\n      payload: error\n    } = _ref9;\n    return { ...state,\n      authError: error\n    };\n  }\n}, initialState);\nexport default auth;","map":{"version":3,"names":["createAction","handleActions","produce","takeLatest","createRequestSaga","createRequestActionTypes","authAPI","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","authSaga","initialState","email","auth","authError","state","payload","draft","error"],"sources":["/Users/bag-yeongmi/react-workspace/todo-react-app/src/modules/auth.js"],"sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\n\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\n\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN');\n\nexport const changeField = createAction(\n    CHANGE_FIELD,\n    ({form, key, value}) => ({\n        form, //register, login\n        key, //username, password, email\n        value //실제 바꾸려는 값\n    }),\n);\n\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); //register / login\n\nexport const register = createAction(REGISTER, ({username, password}) => ({\n    username,\n    password\n}))\nexport const login = createAction(LOGIN, ({username, password}) => ({\n    username,\n    password\n}))\n\n//사가 생성\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n    yield takeLatest(REGISTER, registerSaga);\n    yield takeLatest(LOGIN, loginSaga);\n}\n\nexport const initialState = {\n    register: {\n        email: '',\n        password: '',\n        username: ''\n    },\n    login: {\n        email: '',\n        password: ''\n    },\n    auth: null,\n    authError: null\n};\n\nconst auth = handleActions(\n    {\n        [CHANGE_FIELD]: (state, {payload: {form, key, value}}) => \n        produce(state, draft => {\n            draft[form][key] = value;\n        }),\n        [INITIALIZE_FORM]: (state, {payload: form}) => ({\n            ...state,\n            [form]: initialState[form],\n            authError: null //폼 전환 시 회원 인증 에러 초기화\n        }),\n        //회원가입 성공\n        [REGISTER_SUCCESS]: (state, {payload: auth}) => ({\n            ...state,\n            authError: null,\n            auth\n        }),\n        //회원가입 실패\n        [REGISTER_FAILURE]: (state, {payload: error}) => ({\n            ...state,\n            authError: error\n        }),\n        //로그인 성공\n        [LOGIN_SUCCESS]: (state, {payload: auth}) => ({\n            ...state,\n            authError: null,\n            auth\n        }),\n        //로그인 실패\n        [LOGIN_FAILURE]: (state, {payload: error}) => ({\n            ...state,\n            authError: error\n        })\n    },\n    initialState,\n)\n\nexport default auth;"],"mappings":"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"},"metadata":{},"sourceType":"module"}