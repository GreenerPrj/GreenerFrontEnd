{"ast":null,"code":"var _jsxFileName = \"/Users/bag-yeongmi/react-workspace/todo-react-app/src/Components/pages/Scheduler.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from 'react';\n// import MyplantsTab from './MyPlantsTab';\n// import Button from 'react-bootstrap/Button';\n// import Card from 'react-bootstrap/Card';\n// import './css/Scheduler.css';\n// import axios from 'axios';\n// function Scheduler() {\n//     return (\n//         <>\n//         <MyplantsTab />\n//         <div className='list'>\n//         <Card style={{ width: '18rem' }}>\n//         <Card.Img variant=\"top\" src=\"/img/1.jpg\" />\n//         <Card.Body>\n//             <Card.Title>선인장</Card.Title><br />\n//             <Card.Text>등록일: 7월 24일</Card.Text>\n//             <Card.Text>\n//             이번 친구는 죽이지말고 열심히 키워보자!\n//             </Card.Text>\n//             <Button variant=\"primary\">상세보기</Button>\n//         </Card.Body>\n//         </Card>\n//         <Card style={{ width: '18rem' }}>\n//         <Card.Img variant=\"top\" src=\"/img/4.jpg\" />\n//         <Card.Body>\n//             <Card.Title>장미허브</Card.Title><br />\n//             <Card.Text>등록일: 7월 26일</Card.Text>\n//             <Card.Text>\n//             허브라서 먹을 수 있는 친구인줄 알았는데 식용이 아니었다..\n//             </Card.Text>\n//             <Button variant=\"primary\">상세보기</Button>\n//         </Card.Body>\n//         </Card>\n//         </div>\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Scheduler() {\n  _s();\n\n  const [list, setList] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchList = async () => {\n      try {\n        // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n        setError(null);\n        setList(null); // loading 상태를 true 로 바꿉니다.\n\n        setLoading(true);\n        axios.defaults.headers.common['accessToken'] = `Bearer ${localStorage.getItem(\"access\")}`;\n        const response = await axios.get('/api/v1/my-plants');\n        setList(response.data); // 데이터는 response.data 안에 들어있습니다.\n      } catch (e) {\n        setError(e);\n      }\n\n      setLoading(false);\n    };\n\n    fetchList();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 21\n  }, this);\n  if (!list) return null;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: list.map(list => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [list.id, \" \", list.name, \" \", list.bornDate, \" \", list.imagePath]\n    }, list.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Scheduler, \"s7jG/oEOFLr1zHpISVwdGH4+BO8=\");\n\n_c = Scheduler;\nexport default Scheduler;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scheduler\");","map":{"version":3,"names":["React","useState","useEffect","axios","Scheduler","list","setList","loading","setLoading","error","setError","fetchList","defaults","headers","common","localStorage","getItem","response","get","data","e","map","id","name","bornDate","imagePath"],"sources":["/Users/bag-yeongmi/react-workspace/todo-react-app/src/Components/pages/Scheduler.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import MyplantsTab from './MyPlantsTab';\n// import Button from 'react-bootstrap/Button';\n// import Card from 'react-bootstrap/Card';\n// import './css/Scheduler.css';\n// import axios from 'axios';\n\n// function Scheduler() {\n//     return (\n//         <>\n//         <MyplantsTab />\n\n//         <div className='list'>\n//         <Card style={{ width: '18rem' }}>\n//         <Card.Img variant=\"top\" src=\"/img/1.jpg\" />\n//         <Card.Body>\n//             <Card.Title>선인장</Card.Title><br />\n//             <Card.Text>등록일: 7월 24일</Card.Text>\n//             <Card.Text>\n//             이번 친구는 죽이지말고 열심히 키워보자!\n//             </Card.Text>\n//             <Button variant=\"primary\">상세보기</Button>\n//         </Card.Body>\n//         </Card>\n\n//         <Card style={{ width: '18rem' }}>\n//         <Card.Img variant=\"top\" src=\"/img/4.jpg\" />\n//         <Card.Body>\n//             <Card.Title>장미허브</Card.Title><br />\n//             <Card.Text>등록일: 7월 26일</Card.Text>\n//             <Card.Text>\n//             허브라서 먹을 수 있는 친구인줄 알았는데 식용이 아니었다..\n//             </Card.Text>\n//             <Button variant=\"primary\">상세보기</Button>\n//         </Card.Body>\n//         </Card>\n//         </div>\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Scheduler() {\n  const [list, setList] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchList = async () => {\n      try {\n        // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n        setError(null);\n        setList(null);\n        // loading 상태를 true 로 바꿉니다.\n        setLoading(true);\n        \n        axios.defaults.headers.common['accessToken'] = `Bearer ${localStorage.getItem(\"access\")}`;\n        const response = await axios.get('/api/v1/my-plants');\n        \n        setList(response.data); // 데이터는 response.data 안에 들어있습니다.\n      } catch (e) {\n        setError(e);\n      }\n      setLoading(false);\n    };\n\n    fetchList();\n  }, []);\n\n  if (loading) return <div>로딩중..</div>;\n  if (error) return <div>에러가 발생했습니다</div>;\n  if (!list) return null;\n  return (\n    <ul>\n      {list.map(list => (\n        <li key={list.id}>\n          {list.id} {list.name} {list.bornDate} {list.imagePath}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default Scheduler;"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,SAAT,GAAqB;EAAA;;EACnB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF;QACAD,QAAQ,CAAC,IAAD,CAAR;QACAJ,OAAO,CAAC,IAAD,CAAP,CAHE,CAIF;;QACAE,UAAU,CAAC,IAAD,CAAV;QAEAL,KAAK,CAACS,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,aAA9B,IAAgD,UAASC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAA+B,EAAxF;QACA,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAU,mBAAV,CAAvB;QAEAZ,OAAO,CAACW,QAAQ,CAACE,IAAV,CAAP,CAVE,CAUsB;MACzB,CAXD,CAWE,OAAOC,CAAP,EAAU;QACVV,QAAQ,CAACU,CAAD,CAAR;MACD;;MACDZ,UAAU,CAAC,KAAD,CAAV;IACD,CAhBD;;IAkBAG,SAAS;EACV,CApBQ,EAoBN,EApBM,CAAT;EAsBA,IAAIJ,OAAJ,EAAa,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EACb,IAAIE,KAAJ,EAAW,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EACX,IAAI,CAACJ,IAAL,EAAW,OAAO,IAAP;EACX,oBACE;IAAA,UACGA,IAAI,CAACgB,GAAL,CAAShB,IAAI,iBACZ;MAAA,WACGA,IAAI,CAACiB,EADR,OACajB,IAAI,CAACkB,IADlB,OACyBlB,IAAI,CAACmB,QAD9B,OACyCnB,IAAI,CAACoB,SAD9C;IAAA,GAASpB,IAAI,CAACiB,EAAd;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GAvCQlB,S;;KAAAA,S;AAyCT,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}