{"ast":null,"code":"import { API_BASE_URL } from \"../app-config\";\nimport axios from \"axios\";\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  }); // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n\n  const accessToken = localStorage.getItem(\"access\");\n\n  if (accessToken && accessToken !== null) {\n    headers.append(\"access\", \"Bearer \" + accessToken);\n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then(response => {\n    if (!response.ok) {\n      // response.ok가 true이면 정상적인 리스폰스를 받은것, 아니면 에러 리스폰스를 받은것.\n      return Promise.reject(response);\n    }\n\n    return response;\n  }).catch(error => {\n    // 추가된 부분\n    if (error.status === 403) {// window.location.href = \"/login\"; // redirect\n    }\n\n    return Promise.reject(error);\n  });\n}\nexport function login(userDto) {\n  return call(\"/auth/login\", \"POST\", userDto).then(response => {\n    console.log(response);\n    console.log(response.headers.get(\"access\"));\n\n    if (response.headers.get(\"access\")) {\n      // 로컬 스토리지에 토큰 저장\n      axios.defaults.headers.common[\"accessToken\"] = `Bearer ${response.headers.get(\"access\")}`;\n      localStorage.setItem(\"access\", response.headers.get(\"access\")); // token이 존재하는 경우 Todo 화면으로 리디렉트\n\n      window.location.href = \"/\";\n      alert('로그인 되었습니다.');\n    }\n  });\n} // export function signout() {\n//     localStorage.removeItem(\"access\");\n//     window.location.href = \"/login\";\n//     alert('로그아웃 되었습니다.');\n// }\n\nexport function logout(userDto) {\n  return call(\"/auth/logout\", \"GET\", userDto).then(request => {\n    localStorage.removeItem(\"access\");\n    window.location.href = \"/login\";\n    alert('로그아웃 되었습니다.');\n  });\n}\n;\nexport function signup(userDto) {\n  return call(\"/auth/signup\", \"POST\", userDto);\n} // export function myplantswrite(MyPlantsDTO) {\n//   return call(\"/api/v1/my-plants\", \"POST\", MyPlantsDTO);\n// }\n\nexport function todo(TodoDTO) {\n  return call(\"/todo\", \"POST\", TodoDTO);\n}","map":{"version":3,"names":["API_BASE_URL","axios","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","ok","Promise","reject","catch","error","status","login","userDto","console","log","get","defaults","common","setItem","window","location","href","alert","logout","removeItem","signup","todo","TodoDTO"],"sources":["/Users/bag-yeongmi/react-workspace/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import { API_BASE_URL } from \"../app-config\";\nimport axios from \"axios\";\n\n\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\",\n  }\n  );\n\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n  const accessToken = localStorage.getItem(\"access\");\n\n  if (accessToken && accessToken !== null) {\n    headers.append(\"access\", \"Bearer \" + accessToken);\n    \n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method,\n  };\n\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n    \n  }\n  \n  return fetch(options.url, options)\n    .then((response) =>\n    \n       {\n        \n        if (!response.ok) {\n          // response.ok가 true이면 정상적인 리스폰스를 받은것, 아니면 에러 리스폰스를 받은것.\n          return Promise.reject(response);\n        }\n        return response;\n       }\n    )\n    .catch((error) => {\n      // 추가된 부분\n      if (error.status === 403) {\n        // window.location.href = \"/login\"; // redirect\n      }\n      return Promise.reject(error);\n    });\n}\n\nexport function login(userDto) {\n  return call(\"/auth/login\", \"POST\", userDto).then((response) => {\n    \n    console.log(response);\n    console.log(response.headers.get(\"access\"));\n\n    if (response.headers.get(\"access\")) {\n\n      // 로컬 스토리지에 토큰 저장\n      axios.defaults.headers.common[\n        \"accessToken\"\n      ] = `Bearer ${response.headers.get(\"access\")}`;\n      \n      localStorage.setItem(\"access\", response.headers.get(\"access\"));\n      \n      // token이 존재하는 경우 Todo 화면으로 리디렉트\n      window.location.href = \"/\";\n      alert('로그인 되었습니다.')\n    }\n  });\n}\n\n\n// export function signout() {\n  \n//     localStorage.removeItem(\"access\");\n//     window.location.href = \"/login\";\n//     alert('로그아웃 되었습니다.');\n// }\n\nexport function logout(userDto) {\n  return call(\"/auth/logout\", \"GET\", userDto).then((request) => {\n\n    localStorage.removeItem(\"access\");\n    window.location.href = \"/login\";\n    alert('로그아웃 되었습니다.')     \n      \n    })\n};\n\n\nexport function signup(userDto) {\n    return call(\"/auth/signup\", \"POST\", userDto);\n}\n\n// export function myplantswrite(MyPlantsDTO) {\n//   return call(\"/api/v1/my-plants\", \"POST\", MyPlantsDTO);\n// }\n\nexport function todo(TodoDTO) {\n  return call(\"/todo\", \"POST\", TodoDTO);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}