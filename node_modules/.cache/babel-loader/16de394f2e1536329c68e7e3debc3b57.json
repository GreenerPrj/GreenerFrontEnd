{"ast":null,"code":"import { API_BASE_URL } from \"../app-config\";\nimport PropTypes from 'prop-types';\nconst ACCESS_TOKEN = \"ACCESS_TOKEN\";\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  }); // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n\n  if (accessToken && accessToken !== null) {\n    // console.log(accessToken);\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      // response.ok가 true이면 정상적인 리스폰스를 받은것, 아니면 에러 리스폰스를 받은것.\n      return Promise.reject(json);\n    }\n\n    return json;\n  })).catch(error => {\n    // 추가된 부분\n    if (error.status === 403) {\n      window.location.href = \"/login\"; // redirect\n    }\n\n    return Promise.reject(error);\n  });\n}\nexport function login(userDto) {\n  return call(\"/auth/login\", \"POST\", userDto).then(response => {\n    console.log(PropTypes.response);\n    console.log(response.get(\"headers\"));\n\n    if (response.headers.access_token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(ACCESS_TOKEN, response.headers.access_token); // token이 존재하는 경우 Todo 화면으로 리디렉트\n\n      window.location.href = \"/\";\n      alert('로그인이 되었습니다.');\n    }\n  });\n}\nexport function signout() {\n  localStorage.removeItem(ACCESS_TOKEN);\n  window.location.href = \"/login\";\n  alert('로그아웃 되었습니다.');\n} // export function signout(userDto) {\n//   return call(\"/auth/logout\", \"POST\", userDto).then((response) => {\n//     localStorage.removeItem(ACCESS_TOKEN)\n//     window.location.href = \"/login\";\n//     alert('로그아웃 되었습니다.')     \n//     })\n// };\n\nexport function signup(userDto) {\n  return call(\"/auth/signup\", \"POST\", userDto);\n}\nexport function myplantswrite(MyPlantsDTO) {\n  return call(\"/api/v1/my-plants\", \"POST\", MyPlantsDTO);\n}\nexport function todo(TodoDTO) {\n  return call(\"/todo\", \"POST\", TodoDTO);\n}","map":{"version":3,"names":["API_BASE_URL","PropTypes","ACCESS_TOKEN","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","json","ok","Promise","reject","catch","error","status","window","location","href","login","userDto","console","log","get","access_token","setItem","alert","signout","removeItem","signup","myplantswrite","MyPlantsDTO","todo","TodoDTO"],"sources":["/Users/bag-yeongmi/react-workspace/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import { API_BASE_URL } from \"../app-config\";\nimport PropTypes from 'prop-types';\n\nconst ACCESS_TOKEN = \"ACCESS_TOKEN\";\n\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\",\n  }\n  );\n\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  \n  if (accessToken && accessToken !== null) {\n    // console.log(accessToken);\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n    \n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n    \n  }\n  \n  return fetch(options.url, options)\n    .then((response) =>\n    \n      response.json().then((json) => {\n        \n        if (!response.ok) {\n          // response.ok가 true이면 정상적인 리스폰스를 받은것, 아니면 에러 리스폰스를 받은것.\n          return Promise.reject(json);\n        }\n        return json;\n      })\n    )\n    .catch((error) => {\n      // 추가된 부분\n      if (error.status === 403) {\n        window.location.href = \"/login\"; // redirect\n      }\n      return Promise.reject(error);\n    });\n}\n\nexport function login(userDto) {\n  return call(\"/auth/login\", \"POST\", userDto).then((response) => {\n    \n    console.log(PropTypes.response);\n    console.log(response.get(\"headers\"));\n    if (response.headers.access_token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(ACCESS_TOKEN, response.headers.access_token);\n      \n      // token이 존재하는 경우 Todo 화면으로 리디렉트\n      window.location.href = \"/\";\n      alert('로그인이 되었습니다.')\n    }\n  });\n}\n\n\nexport function signout() {\n  \n    localStorage.removeItem(ACCESS_TOKEN);\n    window.location.href = \"/login\";\n    alert('로그아웃 되었습니다.');\n}\n\n// export function signout(userDto) {\n//   return call(\"/auth/logout\", \"POST\", userDto).then((response) => {\n//     localStorage.removeItem(ACCESS_TOKEN)\n//     window.location.href = \"/login\";\n//     alert('로그아웃 되었습니다.')     \n      \n//     })\n// };\n\n\nexport function signup(userDto) {\n    return call(\"/auth/signup\", \"POST\", userDto);\n}\n\nexport function myplantswrite(MyPlantsDTO) {\n  return call(\"/api/v1/my-plants\", \"POST\", MyPlantsDTO);\n}\n\nexport function todo(TodoDTO) {\n  return call(\"/todo\", \"POST\", TodoDTO);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}